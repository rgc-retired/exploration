A <- sample(1:n, obs, replace = TRUE) # assign objects to centroids at random
colors <- seq(10, 200, 25)
clusterplot <- function(M, A, C, txt) {
plot(M, main = txt, xlab = "", ylab = "")
for(i in 1:n) {
points(C[i, , drop = FALSE], pch = 23, lwd = 3, col = colors[i])
points(M[A == i, , drop = FALSE], col = colors[i])
}
}
clusterplot(M, A, C, "Initialization")
repeat {
# calculate Euclidean distance between objects and centroids
D <- matrix(data = NA, nrow = n, ncol = obs)
for(i in 1:n) {
for(j in 1:obs) {
D[i, j] <- sqrt((M[j, 1] - C[i, 1])^2 + (M[j, 2] - C[i, 2])^2)
}
}
O <- A
## E-step: parameters are fixed, distributions are optimized
A <- max.col(t(-D)) # assign objects to centroids
if(all(O == A)) break # if no change stop
clusterplot(M, A, C, "E-step")
## M-step: distributions are fixed, parameters are optimized
# determine new centroids based on mean of assigned objects
for(i in 1:n) {
C[i, ] <- apply(M[A == i, , drop = FALSE], 2, mean)
}
clusterplot(M, A, C, "M-step")
}
cl <- kmeans(M, n)
clusterplot(M, cl$cluster, cl$centers, "Base R")
print("Custom K-Means Code")
(custom <- C[order(C[ , 1]), ])
print("Using R built-in Code")
(base <- cl$centers[order(cl$centers[ , 1]), ])
print("Difference")
round(base - custom, 13)
t <- "Wholesale customers data.csv"
if (file.exists(t)) {
data <- read.csv(t, header=TRUE)
} else {
data <- read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/00292/Wholesale customers data.csv", header = TRUE)
}
head(data)
set.seed(123)
k <- kmeans(data[ , -c(1, 2)], centers = 4) # remove columns 1 and 2, create 4 clusters
(centers <- k$centers) # display cluster centers
round(prop.table(centers, 2) * 100) # percentage of sales per category
table(k$cluster) # number of customers per cluster
attributes(k)
k$totss
k$withinss
k$betweenss/k$totss
k$iter
attributes(k)
k$centers
names(data)
data[,'Fresh']
data[,c('Fresh','Frozen']
data[,c('Fresh','Frozen')]
d2=data[,c('Fresh','Frozen')]
head(d2)
k2=kmeans(d2,centers=4)
k2.centers
k2$centers
plot(d2)
points(k2$centers,pch=23,lwd=3,col='red')
attributes(k2)
k2$cluster
plot(data[k2$cluster==1,],col='red')
plot(data[k2$cluster==1,c('Fresh','Frozen')],col='red')
points(data[k2$cluster==2,c('Fresh','Frozen')],col=colors[2])
plot(data[,c('Fresh','Frozen')])
for (i in 1:4) {print(i)}
for (i in 1:4) {
points(data[k2$cluster==i,c('Fresh','Frozen')],col=colors[i])
points(k2$center[i,],pch=23,lwd=3,col=colors[i])
}
k2$centers
plot(data[,c('Fresh','Frozen')])
for (i in 1:4) {
points(data[k2$cluster==i,c('Fresh','Frozen')],col=colors[i])
points(k2$centers[i,,drop=FALSE],pch=23,lwd=3,col=colors[i])
}
help("plot")
help(xlim)
plot(data[,c('Fresh','Frozen')],xlim=c(0,40000),ylim=c(0,20000))
for (i in 1:4) {
points(data[k2$cluster==i,c('Fresh','Frozen')],col=colors[i])
points(k2$centers[i,,drop=FALSE],pch=23,lwd=3,col=colors[i])
}
cl$totss
cl$tot.withins/cl$totss
cl$betweenss/cl$totss
k2$betweenss/k2$totss
k2$tot.withins/k2$totss
k$betweenss/k$totss
k$tot.withins/k$totss
set.seed(123)
k <- kmeans(data[ , -c(1, 2)], centers = 4) # remove columns 1 and 2, create 4 clusters
(centers <- k$centers) # display cluster centers
set.seed(123)
k <- kmeans(data[ , -c(1, 2)], centers = 4) # remove columns 1 and 2, create 4 clusters
(centers <- k$centers) # display cluster centers
# set.seed(123)
k <- kmeans(data[ , -c(1, 2)], centers = 4) # remove columns 1 and 2, create 4 clusters
(centers <- k$centers) # display cluster centers
# set.seed(123)
k <- kmeans(data[ , -c(1, 2)], centers = 4) # remove columns 1 and 2, create 4 clusters
(centers <- k$centers) # display cluster centers
# set.seed(123)
k <- kmeans(data[ , -c(1, 2)], centers = 4) # remove columns 1 and 2, create 4 clusters
(centers <- k$centers) # display cluster centers
# set.seed(123)
k <- kmeans(data[ , -c(1, 2)], centers = 4) # remove columns 1 and 2, create 4 clusters
(centers <- k$centers) # display cluster centers
# set.seed(123)
k <- kmeans(data[ , -c(1, 2)], centers = 4) # remove columns 1 and 2, create 4 clusters
(centers <- k$centers) # display cluster centers
# set.seed(123)
k <- kmeans(data[ , -c(1, 2)], centers = 4) # remove columns 1 and 2, create 4 clusters
(centers <- k$centers) # display cluster centers
# set.seed(123)
k <- kmeans(data[ , -c(1, 2)], centers = 4) # remove columns 1 and 2, create 4 clusters
(centers <- k$centers) # display cluster centers
# set.seed(123)
k <- kmeans(data[ , -c(1, 2)], centers = 4) # remove columns 1 and 2, create 4 clusters
(centers <- k$centers) # display cluster centers
# set.seed(123)
k <- kmeans(data[ , -c(1, 2)], centers = 4) # remove columns 1 and 2, create 4 clusters
(centers <- k$centers) # display cluster centers
# set.seed(123)
k <- kmeans(data[ , -c(1, 2)], centers = 4) # remove columns 1 and 2, create 4 clusters
(centers <- k$centers) # display cluster centers
round(prop.table(centers, 2) * 100) # percentage of sales per category
table(k$cluster) # number of customers per cluster
# set.seed(123)
k <- kmeans(data[ , -c(1, 2)], centers = 4) # remove columns 1 and 2, create 4 clusters
(centers <- k$centers) # display cluster centers
round(prop.table(centers, 2) * 100) # percentage of sales per category
table(k$cluster) # number of customers per cluster
# set.seed(123)
k <- kmeans(data[ , -c(1, 2)], centers = 4) # remove columns 1 and 2, create 4 clusters
(centers <- k$centers) # display cluster centers
round(prop.table(centers, 2) * 100) # percentage of sales per category
table(k$cluster) # number of customers per cluster
set.seed(123)
k <- kmeans(data[ , -c(1, 2)], centers = 4) # remove columns 1 and 2, create 4 clusters
(centers <- k$centers) # display cluster centers
round(prop.table(centers, 2) * 100) # percentage of sales per category
table(k$cluster) # number of customers per cluster
set.seed(123)
k <- kmeans(data[ , -c(1, 2)], centers = 4) # remove columns 1 and 2, create 4 clusters
(centers <- k$centers) # display cluster centers
round(prop.table(centers, 2) * 100) # percentage of sales per category
table(k$cluster) # number of customers per cluster
setwd("c:/rgc/test/data/water")
knitr::opts_chunk$set(echo = TRUE)
d=read.delim("all_data.txt",comment.char="#")
head(d)
d=read.delim("all_data.txt",comment.char="#",skip=1)
head(d)
d=read.delim("all_data.txt",comment.char="#")
head(d)
d2=d[-1,]
dim(d2)
d2=d[-1,]
head(d2)
d2=d[-1,]
names(d2)
d2=d[-1,]
cc=names(d2)
cc[4]="Flow"
cc[5]="Status"
names(d2)<-cc
head(d2)
d2=d[-1,]
cc=names(d2)
cc[4]="Flow"
cc[5]="Status"
names(d2)<-cc
head(d2)
d2[d2$Flow=="Ice",]<-NA
d2$Flow<-as.numeric(d2$Flow)
d2=d[-1,]
cc=names(d2)
cc[4]="Flow"
cc[5]="Status"
names(d2)<-cc
d2[d2$Flow=="Ice",]<-NA
d2$Flow<-as.numeric(d2$Flow)
head(d2)
d2=d[-1,]
cc=names(d2)
cc[4]="Flow"
cc[5]="Status"
names(d2)<-cc
d2[d2$Flow=="Ice",]<-NA
head(d2)
d2=d[-1,]
cc=names(d2)
cc[4]="Flow"
cc[5]="Status"
names(d2)<-cc
d2[d2$Flow=="Ice",]<-NA
d2$Flow<-as.character(d2$Flow)
head(d2)
d2=d[-1,]
cc=names(d2)
cc[4]="Flow"
cc[5]="Status"
names(d2)<-cc
d2[d2$Flow=="Ice",]<-NA
d2$Flow<-as.numeric(as.character(d2$Flow))
head(d2)
summary(d2)
d2=d[-1,]
cc=names(d2)
cc[4]="Flow"
cc[5]="Status"
names(d2)<-cc
d2[d2$Flow=="Ice",]<-NA
d2$Flow<-as.numeric(as.character(d2$Flow))
d2$datetime<-as.Date(as.character(d2$datetime))
head(d2)
summary(d2)
plot(d2$datetime,d2$Flow)
year(d2[1:10,'datetime'])
d2[1:10,'datetime']
as.year(d2[1:10,'datetime'])
format(d[1:10,'datetime'],"%Y")
apply(d2[1:10,'datetime'],function(x) format(x,"%Y"))
apply(d2[1:10,'datetime'],function(x) {format(x,"%Y")})
apply(d2[1:10,'datetime'],fun=function(x) {format(x,"%Y")})
help(apply)
format(d2[1:10,'datetime'],"%Y")
format(d2[1:10,'datetime'],"%d")
format(d2[1:10,'datetime'],"%m")
help(filter)
help("group")
a=data.frame(x=c(1,1,1,2,2),y=c(10,20,30,40,50))
a
by(a,x,sum)
by(a,'x',sum)
by(a,a$x,sum)
unlist(by(a,a$x,sum))
unlist(by(a,a$x,mean))
a
by(a,a$x,function(z) {sum(z$y)})
as.matrix(by(a,a$x,function(z) {sum(z$y)}))
a
a$x=c(1.1,1.1,1.1,2.5,2.5)
a
as.matrix(by(a,a$x,function(z) {sum(z$y)}))
row.names(as.matrix(by(a,a$x,function(z) {sum(z$y)})))
as.data.frame(by(a,a$x,function(z) {sum(z$y)}))
as.dataframe(by(a,a$x,function(z) {sum(z$y)}))
data.frame(by(a,a$x,function(z) {sum(z$y)}))
as.matrix(by(a,a$x,function(z) {sum(z$y)}))
as.matrix.data.frame(by(a,a$x,function(z) {sum(z$y)}))
help(matrix)
a
sum(a[a$x,])
by(a,a$x)
by(a,a$x,mean)
by(a,a$x,function(z) {mean(z$Y)}
)
by(a,a$x,function(z) {mean(z$Y)})
by(a,a$x)
by(a,a$x,function(z) {sum(z$y)})
by(a,a$x,function(z) {mean(z$y)})
as.matrix(by(a,a$x,function(z) {mean(z$y)}))
as.vector(by(a,a$x,function(z) {mean(z$y)}))
m=as.matrix(by(a,a$x,function(z) {mean(z$y)}))
rownames(m)
m[,1]
as.vector(m[,1])
typeof(m[,1])
class(m)
class(m[,1])
m[,1]
m[1,]
head(d2)
d2$y<-as.numeric(format(d2$datetime,"%Y"))
head(d2)
m<-as.matrix(by(d2,d2$y,function(z) {mean(z$Flow)}))
dim(m)
m
plot(m)
d3<-data.frame(y=rownames(m),f=as.vector(m[,1]))
head(d3)
plot(d3)
summary(d3)
summary(d2)
typeof(d3)
typeof(d3$y)
typeof(d3$f)
d3
help(boxplot)
head(d2)
boxplot(Flow ~ y,data=d2)
help(plot)
d3
type(d3$y)
typeof(d3$y)
typeof(d3$f)
d3$y<-as.double(d3$y)
plot(d3)
plot(d3$y,d3$f)
head(d3)
d3<-data.frame(y=rownames(m),f=as.vector(m[,1]))
head(d3)
summary(d3)
summary(as.numeric(d3$y))
as.numeric(d3$y)
as.numeric(as.character(d3$y))
as.double(as.character(d3$y))
info(d3)
summary(d3)
typeof(d3)
describe(d3)
summary(d3)
typeof(d3$y)
typeof(d3$f)
head(d3)
plot(d3)
as.double(d3$y)
as.tibble(d3)
is.factor(d3$y)
d3$y=as.numeric(as.character(d3$y))
is.factor(d3$y)
plot(d3)
head(d2)
d2$m<-as.numeric(format(d2$datetime,"%m"))
head(d2)
typeof(d2$m)
dim(d3)
head(d3)
head(d2)
is.factor(d2$y)
is.factor(d2$m)
m<-as.matrix(by(d2,d2$m,function(z) {mean(z$Flow)}))
m
d4<-data.frame(y=rownames(m),f=as.vector(m[,1]))
d4
plot(d4)
summary(d4)
d4<-data.frame(y=as.numeric(rownames(m)),f=as.vector(m[,1]))
summary(d4)
plot(d4)
plot(d4,type='b')
dim(d2)
head(d2)
ddd=d2[d2$m==6,]
dim(ddd)
head(ddd)
summary(ddd)
summary(ddd$Flow)
help(strftime)
head(d2)
d2$doy<-as.numeric(format(d2$dattime,"%j"))
head(d2)
summary(d2$doy)
format(d2[1,'datetime'],"%m")
format(d2[1,'datetime'],"%j")
format(d2$datetime,"%j")
as.numeric(format(d2$datetime,"%j"))
d2$doy<-as.numeric(format(d2$datetime,"%j"))
head(d2)
m<-as.matrix(by(d2,d2$doy,function(z) {mean(z$Flow)}))
dim(m)
head(m)
plot(m)
plot(m,type='b')
plot(m,type='l')
grid()
m<-as.matrix(by(d2,d2$doy,function(z) {max(z$Flow)}))
plot(m,type='l')
m<-as.matrix(by(d2,d2$doy,c(function(z) {max(z$Flow)}, function(z) {min(z$Flow)})))
m<-as.matrix(by(d2,d2$doy,function(z) {c(mean(z$Flow),max(z$Flow))}))
dim(m)
head(m)
typeof(m)
m=unlist(m)
dim(m)
m
m<-as.matrix(by(d2,d2$doy,function(z) {c(mean(z$Flow),max(z$Flow))}),ncol=2)
dim(m)
head(m)
as.matrix(head(m))
as.matrix(m[1:10,])
m
head(as.matrix(unlist(m),ncol=2))
head(t(as.matrix(unlist(m),nrow=2)))
m<-as.matrix(unlist(m))
length(m)
m[1:10,]
dim(m)
m=as.matrix(m[,1],ncol=2,byrow=T)
head(m)
dim(m)
a
class(a)
matrix(a)
as.matrix(a)
as.matrix(a)[,1]
as.matrix(a)[,2]
as.matrix(a)[,2,drop=FALSE)
}]
b=as.matrix(a)
b
b[,1,drop=FALSE]
}]
b[,1,drop=FALSE]
b[,1,drop=T]
b[,1,drop=F]
dim(m)
head(m)
m[2:nrow(m):2,]
m[seq(2,nrow(m),by=2),1]
m[seq(1,nrow(m),by=2),1]
m<-as.matrix(by(d2,d2$doy,function(z) {c(mean(z$Flow),max(z$Flow))}))
dim(m)
attributes(m)
nrow(m)
mcol(m)
ncol(m)
dim(m)
help(as.matrix)
m[1:10,]
m=as.matrix(m,ncol=1,byrow=T)
dim(m)
m[1:10,]
as.vector(m)
unlist(m)
as.matrix(unlist(m),ncol=2,byrow=T)
m=unlist(m)
dim(m)
length(m)
as.matrix(m,ncol=2)
dim(as.matrix(m,ncol=2))
class(m)
typeof(m)
m[1:10]
m[1:20]
m=as.vector(m)
m
m[1:10]
matrix(m,ncol=2,byrow=T)
m<-matrix(unlist(by(d2,d2$doy,function(z) {c(mean(z$Flow),max(z$Flow))})),ncol=2,byrow=T)
dim(m)
m[1:10,]
help(max.col)
max.col(t(m))
m[,1]
summary(m)
which.max(m[,1])
which.max(m[,2])
m[106,]
m[161,]
plot(m[,1],type='l')
lines(m[,2],col='red')
plot(m[,2],col='red')
plot(m[,2],type='l',col='red')
lines(m[,1],col='blue')
plot(m[,2],type='l',col='red',ylim=c(0,2500))
lines(m[,1],col='blue')
grid()
d1=read.delim('all_data.txt',comment.char='#')
d2=read.delim('all_data.txt',comment.char='#',as.is=T)
summary(d1)
summary(d2)
head(d1)
head(d2)
d2=d2[-1,]
head(d2)
names(d2)
cc=names(d2)
cc[4]="Flow"
cc[5]="Status"
names(d2)<-cc
head(d2)
summary(d2$Flow)
x=as.numeric(d2$Flow)
summary(x)
x[1:20]
typeof(x)
head(d2)
d2$Flow<-as.numeric(d2$Flow)
summary(d2$Status)
unique(d2$Status)
d2$status<-as.factor(d2$Status)
summary(d2$status)
unique(d2$status)
names(d2)
head(d2)
d2<-d2[,-'status']
d2<-d2[,-6]
head(d2)
typeof(d2$Status)
help(as.factor)
nunique(d2$Status)
length(unique(d2$Status))
unique(d2$Status)
d2$Status<-as.factor(d2$Status)
levels(d2$Status)
summary(d2$Status)
help(d2)
head(d2)
help(by)
title("Fox River in Waukesha, WI")
