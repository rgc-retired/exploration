knitr::opts_chunk$set(echo = TRUE)
n <- 3 # no. of centroids
set.seed(1415) # set seed for reproducibility
M1 <- matrix(round(runif(100, 1, 5), 1), ncol = 2)
M2 <- matrix(round(runif(100, 7, 12), 1), ncol = 2)
M3 <- matrix(round(runif(100, 20, 25), 1), ncol = 2)
M <- rbind(M1, M2, M3)
C <- M[1:n, ] # define centroids as first n objects
obs <- length(M) / 2
A <- sample(1:n, obs, replace = TRUE) # assign objects to centroids at random
colors <- seq(10, 200, 25)
clusterplot <- function(M, C, txt) {
plot(M, main = txt, xlab = "", ylab = "")
for(i in 1:n) {
points(C[i, , drop = FALSE], pch = 23, lwd = 3, col = colors[i])
points(M[A == i, , drop = FALSE], col = colors[i])
}
}
clusterplot(M, C, "Initialization")
repeat {
# calculate Euclidean distance between objects and centroids
D <- matrix(data = NA, nrow = n, ncol = obs)
for(i in 1:n) {
for(j in 1:obs) {
D[i, j] <- sqrt((M[j, 1] - C[i, 1])^2 + (M[j, 2] - C[i, 2])^2)
}
}
O <- A
## E-step: parameters are fixed, distributions are optimized
A <- max.col(t(-D)) # assign objects to centroids
if(all(O == A)) break # if no change stop
clusterplot(M, C, "E-step")
## M-step: distributions are fixed, parameters are optimized
# determine new centroids based on mean of assigned objects
for(i in 1:n) {
C[i, ] <- apply(M[A == i, , drop = FALSE], 2, mean)
}
clusterplot(M, C, "M-step")
}
cl <- kmeans(M, n)
clusterplot(M, cl$centers, "Base R")
(custom <- C[order(C[ , 1]), ])
(custom <- C[order(C[ , 1]), ])
(base <- cl$centers[order(cl$centers[ , 1]), ])
(custom <- C[order(C[ , 1]), ])
(base <- cl$centers[order(cl$centers[ , 1]), ])
round(base - custom, 13)
data <- read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/00292/Wholesale customers data.csv", header = TRUE)
head(data)
set.seed(123)
k <- kmeans(data[ , -c(1, 2)], centers = 4) # remove columns 1 and 2, create 4 clusters
(centers <- k$centers) # display cluster centers
round(prop.table(centers, 2) * 100) # percentage of sales per category
dim(data)
head(data)
head(data,20)
table(k$cluster) # number of customers per cluster
print("Custom K-Means Code")
(custom <- C[order(C[ , 1]), ])
(base <- cl$centers[order(cl$centers[ , 1]), ])
round(base - custom, 13)
print("Custom K-Means Code")
(custom <- C[order(C[ , 1]), ])
print("Using R built-in Code")
(base <- cl$centers[order(cl$centers[ , 1]), ])
round(base - custom, 13)
print("Custom K-Means Code")
(custom <- C[order(C[ , 1]), ])
print("Using R built-in Code")
(base <- cl$centers[order(cl$centers[ , 1]), ])
print("Difference")
round(base - custom, 13)
cl$centers
colors[1]
colors[2]
colors[3]
C
cl$centers
plot(runif(10),type='b')
plot(runif(10),type='b',col=colors[1])
plot(runif(10),type='b',col=colors[2])
plot(runif(10),type='b',col=colors[3])
dim(M)
plot(m[,1],M[,2],type='b')
plot(M[,1],M[,2])
plot(M[1:50,1],M[1:50,2])
unique(A)
dim(A)
A[1:10]
plot(A)
dim(M)
plot(M)
n
dim(C)
C[1,]
C[1,,dorp=FALSE]
C[1,,drop=FALSE]
dim(A)
A==1
n
obs
colors
plot(M,col=colors[1])
plot(M,col=colors[2])
plot(M,col=colors[3])
plot(M,col=colors[4])
plot(M,col=colors[5])
plot(M,col=colors[6])
plot(M,col=colors[7])
plot(M,col=colors[8])
C
attributes(cl)
cluster
cl$cluster
cl$centers
colors[cl$cluster]
plot(M,col=colors[cl$cluster])
plot(cl$cluster,pch=23,col=colors[1:n],lwd=3)
cl$cluster
plot(M,col=colors[cl$cluster])
points(cl$centers,pch=23,col=colors[1:n],lwd=3)
C
plot(M)
points(M[cl$cluster==1,,drop=F],col=colors[1])
cl$centers
cl$centers[order(cl$centers),]
cl$centers[order(cl$centers[,1]),]
C
A
C
cl$cluster
cl$centers
n <- 3 # no. of centroids
set.seed(1415) # set seed for reproducibility
M1 <- matrix(round(runif(100, 1, 5), 1), ncol = 2)
M2 <- matrix(round(runif(100, 7, 12), 1), ncol = 2)
M3 <- matrix(round(runif(100, 20, 25), 1), ncol = 2)
M <- rbind(M1, M2, M3)
C <- M[1:n, ] # define centroids as first n objects
obs <- length(M) / 2
A <- sample(1:n, obs, replace = TRUE) # assign objects to centroids at random
colors <- seq(10, 200, 25)
clusterplot <- function(M, A, C, txt) {
plot(M, main = txt, xlab = "", ylab = "")
for(i in 1:n) {
points(C[i, , drop = FALSE], pch = 23, lwd = 3, col = colors[i])
points(M[A == i, , drop = FALSE], col = colors[i])
}
}
clusterplot(M, A, C, "Initialization")
n <- 3 # no. of centroids
set.seed(1415) # set seed for reproducibility
M1 <- matrix(round(runif(100, 1, 5), 1), ncol = 2)
M2 <- matrix(round(runif(100, 7, 12), 1), ncol = 2)
M3 <- matrix(round(runif(100, 20, 25), 1), ncol = 2)
M <- rbind(M1, M2, M3)
C <- M[1:n, ] # define centroids as first n objects
obs <- length(M) / 2
A <- sample(1:n, obs, replace = TRUE) # assign objects to centroids at random
colors <- seq(10, 200, 25)
clusterplot <- function(M, A, C, txt) {
plot(M, main = txt, xlab = "", ylab = "")
for(i in 1:n) {
points(C[i, , drop = FALSE], pch = 23, lwd = 3, col = colors[i])
points(M[A == i, , drop = FALSE], col = colors[i])
}
}
clusterplot(M, A, C, "Initialization")
repeat {
# calculate Euclidean distance between objects and centroids
D <- matrix(data = NA, nrow = n, ncol = obs)
for(i in 1:n) {
for(j in 1:obs) {
D[i, j] <- sqrt((M[j, 1] - C[i, 1])^2 + (M[j, 2] - C[i, 2])^2)
}
}
O <- A
## E-step: parameters are fixed, distributions are optimized
A <- max.col(t(-D)) # assign objects to centroids
if(all(O == A)) break # if no change stop
clusterplot(M, A, C, "E-step")
## M-step: distributions are fixed, parameters are optimized
# determine new centroids based on mean of assigned objects
for(i in 1:n) {
C[i, ] <- apply(M[A == i, , drop = FALSE], 2, mean)
}
clusterplot(M, A, C, "M-step")
}
cl <- kmeans(M, n)
clusterplot(M, cl$cluster, cl$centers, "Base R")
A
cl$cluster
table(A)
table(cl$cluster)
cl$iter
cl$withinss
cl$size
cl$totss
cl$tot.withinss
cl$betweens
cl$betweens/cl$totss
cl$tot.withins/cl$totss
D
max.col(t(-D))
help(max.col)
dim(D)
D[1,]
max.col()
max.col(D)
D[3,]
which.max(D[3,])
which.max(D[1,])
which.max(D[2,])
which.min(D[1,])
which.min(D[2,])
which.min(D[3,])
max.col(t(-D))
size(D)
dim(D)
D[1,]
D[,1]
min.col(t(D))
max.col(t(-D))
A
cl$cluster
rep(c(2,1,3),each=50)
rep(c(1,3,2),each=50)
k$cluster
table(k$cluster)
centers
dir()
file.list()
list.files()
list.files()[3]
t=list.files()[3]
file.exists(t)
t <- "Wholesale customers data.csv"
if file.exists(t) {
t <- "Wholesale customers data.csv"
if (file.exists(t)) {
data <- read.csv(t, header=TRUE)
} else {
data <- read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/00292/Wholesale customers data.csv", header = TRUE)
}
head(data)
