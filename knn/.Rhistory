setwd("c:/rgc/test/data/knn")
knitr::opts_chunk$set(echo = TRUE)
# helper function for plotting images of digits in a nice way + returning the respective number
plot_digit <- function(digit) {
M <- matrix(as.numeric(digit[1:256]), nrow = 16, ncol = 16, byrow = TRUE)
image(t(M[nrow(M):1, ]), col = c(0,1), xaxt = "n", yaxt = "n", useRaster = TRUE)
digit[257]
}
# load data and chose some digits as examples
semeion <- read.table("./semeion.data", quote = "\"", comment.char = "") # put in right path here!
digit_data <- semeion[ , 1:256]
which_digit <- apply(semeion[ , 257:266], 1, function(x) which.max(x) - 1)
semeion_new <- cbind(digit_data, which_digit)
# chose training and test set by chance
set.seed(123) # for reproducibility
data <- semeion_new
random <- sample(1:nrow(data), 0.8 * nrow(data)) # 80%: training data, 20%: test data
train <- data[random, ]
test <- data[-random, ]
# plot example digits
old_par <- par(mfrow = c(4, 6), oma = c(5, 4, 0, 0) + 0.1, mar = c(0, 0, 1, 1) + 0.1)
matrix(apply(train[1:24, ], 1, plot_digit), 4, 6, byrow = TRUE)
# helper function for plotting images of digits in a nice way + returning the respective number
plot_digit <- function(digit) {
M <- matrix(as.numeric(digit[1:256]), nrow = 16, ncol = 16, byrow = TRUE)
image(t(M[nrow(M):1, ]), col = c(0,1), xaxt = "n", yaxt = "n", useRaster = TRUE)
digit[257]
}
# load data and chose some digits as examples
semeion <- read.table("./semeion.data", quote = "\"", comment.char = "") # put in right path here!
digit_data <- semeion[ , 1:256]
which_digit <- apply(semeion[ , 257:266], 1, function(x) which.max(x) - 1)
semeion_new <- cbind(digit_data, which_digit)
# chose training and test set by chance
set.seed(123) # for reproducibility
data <- semeion_new
random <- sample(1:nrow(data), 0.8 * nrow(data)) # 80%: training data, 20%: test data
train <- data[random, ]
test <- data[-random, ]
# plot example digits
old_par <- par(mfrow = c(4, 6), oma = c(5, 4, 0, 0) + 0.1, mar = c(0, 0, 1, 1) + 0.1)
matrix(apply(train[1:24, ], 1, plot_digit), 4, 6, byrow = TRUE)
par(old_par)
dist_eucl <- function(x1, x2) {
sqrt(sum((x1 - x2) ^ 2)) # Pythagorean theorem!
}
mode <- function(NNs) {
names(sort(-table(NNs[ncol(NNs)])))[1] # mode = majority vote
}
knn <- function(train, test, k = 5) {
dist_sort <- order(apply(train[-ncol(train)], 1, function(x) dist_eucl(as.numeric(x), x2 = as.numeric(test[-ncol(test)]))))
mode(train[dist_sort[1:k], ])
}
# show a few examples
set.seed(123) # for reproducibility
no_examples <- 24
examples <- sample(dim(test)[1], no_examples)
old_par <- par(mfrow = c(4, 6), oma = c(5, 4, 0, 0) + 0.1, mar = c(0, 0, 1, 1) + 0.1)
matrix(apply(test[examples, ], 1, plot_digit), 4, 6, byrow = TRUE)
# show a few examples
set.seed(123) # for reproducibility
no_examples <- 24
examples <- sample(dim(test)[1], no_examples)
old_par <- par(mfrow = c(4, 6), oma = c(5, 4, 0, 0) + 0.1, mar = c(0, 0, 1, 1) + 0.1)
matrix(apply(test[examples, ], 1, plot_digit), 4, 6, byrow = TRUE)
par(old_par)
prediction <- integer(no_examples)
for (i in 1:no_examples) {
prediction[i] <- knn(train, test[examples[i], ], k = 9)
}
print(matrix(prediction, 4, 6, byrow = TRUE), quote = FALSE, right = TRUE)
nrow(test)
nrow(train)
nrow(data)
1593*0.8
319+1274
prediction <- integer(nrow(test))
ptm <- proc.time()
for (i in 1:nrow(test)) {
prediction[i] <- knn(train, test[i, ], k = 9)
}
proc.time() - ptm
dim(test)
test[1:10,257]
ncol(test)
test[1:10,ncol(test)]
sum(test[,ncol(test)]==prediction)
sum(test[,ncol(test)]==prediction)/nrow(test)
paste0('Accuracy = ',sum(test[,ncol(test)]==prediction)/nrow(test))
# show misclassified digits
err <- which(as.integer(prediction) != unlist(test[ncol(test)]))
old_par <- par(mfrow = c(3, 6), oma = c(5, 4, 0, 0) + 0.1, mar = c(0, 0, 1, 1) + 0.1)
matrix(apply(test[err, ], 1, plot_digit), 3, 6, byrow = TRUE)
par(old_par)
prediction[err]
test[err,ncol(test)]
as.integer(prediction[err])
err
test[272,ncol(test)]
type(prediction)
summmary(prediction)
summary(prediction)
prediction=as.integer(prediction)
summary(prediction)
which((test[,ncol(test)]==4) & (prediction==1))
plot_digit(test[143])
plot_digit(test[143,])
plot_digit(test[272,])
plot_digit(test[143,])
plot_digit(test[143,])
plot_digit(test[272,])
test[err,ncol(test)]
c(test[err,ncol(test)],prediction[err])
matrix(c(test[err,ncol(test)],prediction[err]),ncol=2)
m=matrix(c(test[err,ncol(test)],prediction[err]),ncol=2)
help(sort)
sort(m)
sort(m[,1])
sort(m[,1],return.index=T)
sort(m[,1],index.return=T)
m[,1][sort(m[,1],index.return=T)]
sort(m[,1],index.return=T)
sort(m[,1],index.return=T)$ix
m[sort(m[,1],index.return=T)$ix,]
help(order)
order(m[,1])
m[order(m[1,]),]
m
m[order(m[,1]),]
m[order(m[,1])]
m[order(m[,1]),]
help(table)
x=c(1,2,3)
y=c(1,1,4)
table(x,y)
table(prediction,test[,ncol(test)])
t=table(prediction,test[,ncol(test)])
t
rownames(t)
help(tabulate)
t
type(t)
typeof(t)
class(t)
print(t)
print(t,zero.print=".")
ls(t)
t
t$responseName
t=table(prediction,test[,ncol(test)])
print(t,zero.print=".")
t=table(prediction,test[,ncol(test)],responseName="Actual")
t=table(prediction,test[,ncol(test)])
print(t,zero.print=".")
t
attr(t)
attributes(t)
t$name
t$dimnames
t$class
dimnames(t)
t[[1]]
t
row.names(x)
row.names(t)
colnames(t)
names(t)
t
attributes(t)
dimnames(t)
dimnames(t)[1]
dimnames(t)[1][1]
t
print(t)
as.table(t)
labels(t)
labels(t)[[2]]
rownames(t)
colnames(t)
list(t)
dimnames(t)
dimnames(t)<-"zzz"
dimnames(t)
list('a','b')
list(a='a','b')
dimnames(t)
dimnames(t)<-list(prediction=rownames(t),actual=colnames(t))
t
print(t,zero.print=".")
dimnames(t)<-list(predict=rownames(t),actual=colnames(t))
print(t,zero.print=".")
t
margin.table(t)
margin.table(t,1)
margin.table(t,2)
addmargins(t)
t=table(predict=prediction,actual=test[,ncol(test)])
print(t,zero.print=".")
t=addmargins(table(predict=prediction,actual=test[,ncol(test)]))
print(t,zero.print=".")
d=data[1,]
dim(d)
d[257]
summary(d[1:256])
d=as.vector(d)
size(d)
dim(d)
summary(d)
d=t(d)
summary(d)
dig
dig=matrix(d[1:256],ncol=16,byrow=T)
size(dig)
dim(dig)
image(dig,col=c(0,1))
image(dig,col=c(0,1),useRaster=T)
image(dig,col=c(0,1),xaxt="n",yaxt="n",useRaster=T)
plot_digit(data[1,])
plot_digit(data[2,])
plot_digit(data[3,])
plot_digit(data[20,])
plot_digit(data[100,])
plot_digit(data[200,])
plot_digit(data[300,])
d=matrix(data[300,1:256],ncol=16,byrow=T)
image(d,col=c(0,1),xaxt="n",yaxt="n",useRaster=T)
class(d)
dim(d)
typeof(d)
d=as.numeric(d)
typeof(d)
image(d,col=c(0,1),xaxt="n",yaxt="n",useRaster=T)
dim(d)
d=data[300,
]
size(d)
dim(d)
d=matrix(d[1,1:256],ncol=16,byrow=T)
d
image(d,col=c(0,1),xaxt="n",yaxt="n",useRaster=T)
d
typeof(d)
d[[1]]
d[[2]]
d[[3]]
d=as.matrix(d)
d
typeof(d)
class(d)
image(d,col=c(0,1),xaxt="n",yaxt="n",useRaster=T)
d=matrix(d)
d
d=matrix(d,nrow=16,ncol=16,byrow=T)
d
typeof(d)
class(d)
summary(d)
is.numeric(d)
d=as.numeric(d)
d
d=matrix(d,ncol=16,byrow=T)
d
typeof(d)
class(d)
image(d,col=c(0,1),xaxt="n",yaxt="n",useRaster=T)
dim(d)
t(d)
image(t(d),col=c(0,1),xaxt="n",yaxt="n",useRaster=T)
image(t(d[16:1,]),col=c(0,1),xaxt="n",yaxt="n",useRaster=T)
plot_digit(data[300,])
image(t(d[16:1,]),col=c(0,1),xaxt="n",yaxt="n",useRaster=T)
d=digit[300,]
d=data[300,]
d
d=as.numeric(d)
dim(d)
d
d=d[1:256]
d=matrix(d,ncol=16)
d
typeof(d)
image(d,col=c(0,1),xaxt="n",yaxt="n",useRaster=T)
image(d[16:1,],col=c(0,1),xaxt="n",yaxt="n",useRaster=T)
image(t(d[16:1,]),col=c(0,1),xaxt="n",yaxt="n",useRaster=T)
image(d,col=c(0,1),xaxt="n",yaxt="n",useRaster=T)
plot_digit(data[300,])
image(d,col=c(0,1),xaxt="n",yaxt="n",useRaster=T)
plot_digit(data[300,])
image(d,col=c(0,1),xaxt="n",yaxt="n",useRaster=T)
plot_digit(data[300,])
image(d[16:1,],col=c(0,1),xaxt="n",yaxt="n",useRaster=T)
image(d,col=c(0,1),xaxt="n",yaxt="n",useRaster=T)
image(d[,16:1],col=c(0,1),xaxt="n",yaxt="n",useRaster=T)
mode(c(1,2,3,4,3,4,5))
help(mode)
ee
dim(test)
plot_digit(test[242,])
err
plot_digit(test[272])
plot_digit(test[272,])
knn(train,test[272,],k=9)
dist_sort<-order(apply(train[-ncol(train)], 1, function(x) dist_eucl(as.numeric(x), x2 = as.numeric(test[-ncol(test)])[272,])))
dist_sort<-order(apply(train[-ncol(train)], 1, function(x) dist_eucl(as.numeric(x), x2 = as.numeric(test[272,][-ncol(test)]))))
dist_sort[1:20]
train[dist_sort[1:20],257]
mode(train[dist_sort[1:20],257])
knn(train,test[272,])
knn(train,test[272,],k=9)
knn(train,test[272,],k=5
)
knn(train,test[272,],k=3)
knn(train,test[272,],k=5)
dist_sort<-apply(train[-ncol(train)],1,function(x) dist_eucl(as.numeric(x),x2=as.numeric(test[272,-257])))
dist_sort[1:20]
dim(dist_sort)
length(dist_sort)
rownames(dist_sort)
colnames(dist_sort)
d=order(dist_sort)
d[1:10]
dist_sort[534]
min(dist_sort)
which.min(dist_sort)
d[1:10]
plot_digit(train[534,])
plot_digit(train[992,])
plot_digit(train[996,])
train[996,257]
length(d)
mode(train[d,])
mode(train[d[1:9],])
mode(train[d[1:31],])
mode(train[d[1:100],])
train[d[1:30],257]
table(train[,257])
table(train[d[1:30],257])
table(train[d[1:10],257])
table(train[d[1:20],257])
table(train[d[1:30],257])
table(train[d[1:40],257])
table(train[d[1:50],257])
table(train[d[1:60],257])
table(train[d[1:100],257])
matrix(c(prediction[err],test[err,257]),ncol=2)
table(prediction[err],test[err,257])
print(table(prediction[err],test[err,257]),zero.print=".")
addmargins(table(prediction[err],test[err,257]))
addmargins(table(predict=prediction[err],actual=test[err,257]))
print(addmargins(table(predict=prediction[err],actual=test[err,257])),zero.print=".")
print(addmargins(table(predict=prediction[err],actual=test[err,257])),zero.print=".")
err[13]
train[233,257]
predict[233]
prediction[233]
err[14]
train[237,257]
prediction[237]
err[1]
test[11,257]
prediction[11]
test[233,257]
err[13]
test[233,257]
prediction[233]
err[c(2,7,8)]
test[29,257]
test[102,257]
test[103,257]
prediction[c(29,102,103)]
x=rnorm(10)
x
sort(x)
sort(-x)
names(sort(x))
knn(train,test[272,])
knn(train,test[272,],k=1)
knn(train,test[233,],k=1)
knn(train,test[233,],k=3)
knn(train,test[233,],k=9)
knn(train,test[233,],k=50)
plot_digit(test[233,])
test[233,257]
x
x=as.integer(10*x)
x
table(x)
sort(-table(x))
names(sort(-table(x)))
names(sort(-table(x)))[1]
order(-table(x))
table(x)
sort(-table(x))
table(x)
order(-table(x))[1]
sort(-table(x))[1]
names(sort(-table(x))[1])
names(sort(-table(x)))[1]
as.numeric(names(sort(-table(x)))[1])
sort(rnorm(10))
x
table(x)
-table(x)
sort(-table(x))
names(sort(-table(x)))
names(sort(-table(x)))[1]
knitr::opts_chunk$set(echo = TRUE)
# helper function for plotting images of digits in a nice way + returning the respective number
plot_digit <- function(digit) {
M <- matrix(as.numeric(digit[1:256]), nrow = 16, ncol = 16, byrow = TRUE)
image(t(M[nrow(M):1, ]), col = c(0,1), xaxt = "n", yaxt = "n", useRaster = TRUE)
digit[257]
}
# load data and chose some digits as examples
semeion <- read.table("./semeion.data", quote = "\"", comment.char = "") # put in right path here!
digit_data <- semeion[ , 1:256]
which_digit <- apply(semeion[ , 257:266], 1, function(x) which.max(x) - 1)
semeion_new <- cbind(digit_data, which_digit)
# chose training and test set by chance
set.seed(123) # for reproducibility
data <- semeion_new
random <- sample(1:nrow(data), 0.8 * nrow(data)) # 80%: training data, 20%: test data
train <- data[random, ]
test <- data[-random, ]
# plot example digits
old_par <- par(mfrow = c(4, 6), oma = c(5, 4, 0, 0) + 0.1, mar = c(0, 0, 1, 1) + 0.1)
matrix(apply(train[1:24, ], 1, plot_digit), 4, 6, byrow = TRUE)
par(old_par)
dist_eucl <- function(x1, x2) {
sqrt(sum((x1 - x2) ^ 2)) # Pythagorean theorem!
}
mode <- function(NNs) {
names(sort(-table(NNs[ncol(NNs)])))[1] # mode = majority vote
}
knn <- function(train, test, k = 5) {
dist_sort <- order(apply(train[-ncol(train)], 1, function(x) dist_eucl(as.numeric(x), x2 = as.numeric(test[-ncol(test)]))))
mode(train[dist_sort[1:k], ])
}
# show a few examples
set.seed(123) # for reproducibility
no_examples <- 24
examples <- sample(dim(test)[1], no_examples)
old_par <- par(mfrow = c(4, 6), oma = c(5, 4, 0, 0) + 0.1, mar = c(0, 0, 1, 1) + 0.1)
matrix(apply(test[examples, ], 1, plot_digit), 4, 6, byrow = TRUE)
par(old_par)
prediction <- integer(no_examples)
for (i in 1:no_examples) {
prediction[i] <- knn(train, test[examples[i], ], k = 9)
}
print(matrix(prediction, 4, 6, byrow = TRUE), quote = FALSE, right = TRUE)
prediction <- integer(nrow(test))
ptm <- proc.time()
for (i in 1:nrow(test)) {
prediction[i] <- knn(train, test[i, ], k = 9)
}
proc.time() - ptm
paste0('Accuracy = ',sum(test[,ncol(test)]==prediction)/nrow(test))
t=addmargins(table(predict=prediction,actual=test[,ncol(test)]))
print(t,zero.print=".")
# show misclassified digits
err <- which(as.integer(prediction) != unlist(test[ncol(test)]))
old_par <- par(mfrow = c(3, 6), oma = c(5, 4, 0, 0) + 0.1, mar = c(0, 0, 1, 1) + 0.1)
matrix(apply(test[err, ], 1, plot_digit), 3, 6, byrow = TRUE)
par(old_par)
print(addmargins(table(predict=prediction[err],actual=test[err,257])),zero.print=".")
